import random
import time
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import database

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}


def get_user_state(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return user_states.get(user_id, {})


def set_user_state(user_id, state_data):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_states[user_id] = state_data


def clear_user_state(user_id):
    """–û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id in user_states:
        del user_states[user_id]


def get_random_word_and_options(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞."""
    user_words = database.get_user_words(user_id)
    print(f"üìö –ù–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {len(user_words)}")

    if not user_words:
        return None, [], []

    target_word = random.choice(user_words)
    target_id, en, ru = target_word
    print(f"üéØ –í—ã–±—Ä–∞–Ω–æ —Å–ª–æ–≤–æ: {ru} -> {en}")

    other_words = [word for word in user_words if word[0] != target_id]
    wrong_options = random.sample(other_words, min(3, len(other_words)))
    wrong_answers = [word[1] for word in wrong_options]

    options = [en] + wrong_answers
    random.shuffle(options)
    print(f"üìù –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤: {options}")

    return (ru, options, en)


def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    from main import bot
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name

    print(f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    database.register_user(user_id, username, first_name)

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    clear_user_state(user_id)

    welcome_text = """üéì <b>–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤!</b>

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/study - üéØ –ù–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ —Å–ª–æ–≤
/add_word - ‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ
/delete_word - üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞
/stats - üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

<b>–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏ –µ–µ –≤—Ä—É—á–Ω—É—é!</b>"""

    bot.send_message(message.chat.id, welcome_text, parse_mode='HTML')


def start_study(message):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —É—Ä–æ–∫ —Å –≤—ã–±–æ—Ä–æ–º —Å–ª–æ–≤–∞."""
    from main import bot
    user_id = message.from_user.id
    print(f"üéì –ù–∞—á–∞–ª–æ –∏–∑—É—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    clear_user_state(user_id)

    question, options, correct_answer = get_random_word_and_options(user_id)

    if not question:
        bot.send_message(message.chat.id,
                         "üì≠ <b>–í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç!</b>\n"
                         "–î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é /add_word",
                         parse_mode='HTML')
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑—É—á–µ–Ω–∏—è
    set_user_state(user_id, {
        'mode': 'study',
        'correct_answer': correct_answer,
        'question': question
    })

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    buttons = [KeyboardButton(option) for option in options]
    for i in range(0, len(buttons), 2):
        row = buttons[i:i + 2]
        markup.row(*row)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    markup.row(KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏–∑—É—á–µ–Ω–∏–µ"))

    bot.send_message(message.chat.id,
                     f"<b>–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ</b> üî§ <code>{question}</code>?",
                     reply_markup=markup,
                     parse_mode='HTML')


def handle_text_message(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    from main import bot
    user_id = message.from_user.id
    text = message.text.strip()

    user_state = get_user_state(user_id)
    current_mode = user_state.get('mode', '')

    print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: '{text}' (—Ä–µ–∂–∏–º: {current_mode})")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã
    if text.lower() in ['–æ—Ç–º–µ–Ω–∞', '–æ—Ç–º–µ–Ω–∏—Ç—å', 'cancel', '‚ùå –æ—Ç–º–µ–Ω–∏—Ç—å –∏–∑—É—á–µ–Ω–∏–µ']:
        handle_cancel(message)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    if current_mode == 'study':
        handle_study_answer(message)
    elif current_mode == 'add_word_step1':
        handle_add_word_step1(message)
    elif current_mode == 'add_word_step2':
        handle_add_word_step2(message)
    else:
        # –ï—Å–ª–∏ –Ω–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        bot.send_message(message.chat.id,
                         "ü§î <b>–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É</b>\n"
                         "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥",
                         parse_mode='HTML')


def handle_cancel(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –æ–ø–µ—Ä–∞—Ü–∏–∏."""
    from main import bot
    user_id = message.from_user.id

    clear_user_state(user_id)

    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(KeyboardButton("/study"), KeyboardButton("/add_word"))
    markup.row(KeyboardButton("/stats"), KeyboardButton("/delete_word"))

    bot.send_message(message.chat.id,
                     "‚úÖ <b>–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n"
                     "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É:",
                     reply_markup=markup,
                     parse_mode='HTML')


def handle_study_answer(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –≤–æ –≤—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è."""
    from main import bot
    user_id = message.from_user.id
    user_answer = message.text.strip()

    user_state = get_user_state(user_id)
    correct_answer = user_state.get('correct_answer', '')
    question = user_state.get('question', '')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    if user_answer == correct_answer:
        response_text = "‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –û—Ç–ª–∏—á–Ω–æ!</b> üéâ"
    else:
        response_text = f"‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.</b> –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <code>{correct_answer}</code>"

    bot.send_message(message.chat.id, response_text, parse_mode='HTML')

    # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–ª–æ–≤–æ–º
    time.sleep(2)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ
    start_study(message)


def add_word_step_1(message):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞."""
    from main import bot
    user_id = message.from_user.id
    print(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    set_user_state(user_id, {'mode': 'add_word_step1'})

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))

    bot.send_message(message.chat.id,
                     "üìù <b>–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:</b>\n"
                     "<i>–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚ùå –û—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã</i>",
                     reply_markup=markup,
                     parse_mode='HTML')


def handle_add_word_step1(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—ã–π —à–∞–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞."""
    from main import bot
    user_id = message.from_user.id
    english_word = message.text.strip().lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–ª–æ–≤–∞
    if not english_word or not all(c.isalpha() or c.isspace() for c in english_word):
        bot.send_message(message.chat.id,
                         "‚ùå <b>–°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã!</b>\n"
                         "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                         parse_mode='HTML')
        return

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    set_user_state(user_id, {
        'mode': 'add_word_step2',
        'english_word': english_word
    })

    bot.send_message(message.chat.id,
                     f"üåç <b>–û—Ç–ª–∏—á–Ω–æ! –°–ª–æ–≤–æ:</b> <code>{english_word}</code>\n"
                     "<b>–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π:</b>",
                     parse_mode='HTML')


def handle_add_word_step2(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ç–æ—Ä–æ–π —à–∞–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞."""
    from main import bot
    user_id = message.from_user.id
    russian_translation = message.text.strip()

    user_state = get_user_state(user_id)
    english_word = user_state.get('english_word', '')

    if not english_word:
        bot.send_message(message.chat.id,
                         "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.</b>\n"
                         "–ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /add_word",
                         parse_mode='HTML')
        clear_user_state(user_id)
        return

    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞: {english_word} -> {russian_translation} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–æ –≤ –±–∞–∑—É
    success = database.add_word_to_db(user_id, english_word, russian_translation)

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(KeyboardButton("/study"), KeyboardButton("/add_word"))
    markup.row(KeyboardButton("/stats"), KeyboardButton("/delete_word"))

    if success:
        words_count = database.get_word_count(user_id)
        bot.send_message(message.chat.id,
                         f"‚úÖ <b>–°–ª–æ–≤–æ '{english_word}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b>\n"
                         f"üìä <b>–¢–µ–ø–µ—Ä—å –≤—ã –∏–∑—É—á–∞–µ—Ç–µ {words_count} —Å–ª–æ–≤.</b>",
                         reply_markup=markup,
                         parse_mode='HTML')
    else:
        bot.send_message(message.chat.id,
                         "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞.</b>\n"
                         "–í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫–æ–µ —Å–ª–æ–≤–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
                         reply_markup=markup,
                         parse_mode='HTML')

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    clear_user_state(user_id)


def delete_word_list(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    from main import bot
    user_id = message.from_user.id
    words = database.get_user_words(user_id)

    if not words:
        bot.send_message(message.chat.id, "üì≠ <b>–í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç.</b>", parse_mode='HTML')
        return

    markup = InlineKeyboardMarkup()
    for word_id, en_word, ru_translation in words:
        callback_data = f"delete_{word_id}"
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
        button_text = f"‚ùå {en_word} - {ru_translation}"
        if len(button_text) > 40:
            button_text = f"‚ùå {en_word} - {ru_translation[:15]}..."
        btn = InlineKeyboardButton(button_text, callback_data=callback_data)
        markup.add(btn)

    bot.send_message(message.chat.id,
                     "üóëÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>",
                     reply_markup=markup,
                     parse_mode='HTML')


def handle_delete_query(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è."""
    from main import bot
    user_id = call.from_user.id
    word_id = int(call.data.split('_')[1])

    success = database.delete_word_from_user(user_id, word_id)

    if success:
        bot.answer_callback_query(call.id, "‚úÖ –°–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ!")
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="‚úÖ <b>–°–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ.</b>\n–ù–∞–∂–º–∏—Ç–µ /delete_word –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏.",
            parse_mode='HTML'
        )
    else:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ.")


def show_stats(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏–∑—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å."""
    from main import bot
    user_id = message.from_user.id
    words_count = database.get_word_count(user_id)

    if words_count == 0:
        bot.send_message(message.chat.id,
                         "üì≠ <b>–í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç.</b>\n"
                         "–î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é /add_word",
                         parse_mode='HTML')
    else:
        bot.send_message(message.chat.id,
                         f"üìä <b>–í—ã –∏–∑—É—á–∞–µ—Ç–µ {words_count} —Å–ª–æ–≤.</b>\n"
                         "–ù–∞—á–Ω–∏—Ç–µ –∏–∑—É—á–µ–Ω–∏–µ: /study",
                         parse_mode='HTML')


def cancel_operation(message):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã."""
    from main import bot
    user_id = message.from_user.id

    clear_user_state(user_id)

    bot.send_message(message.chat.id,
                     "‚úÖ <b>–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.</b>\n"
                     "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥.",
                     parse_mode='HTML')