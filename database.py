import sqlite3
import os


class SQLiteDatabase:
    def __init__(self, db_file='english_bot.db'):
        self.db_file = db_file
        self.init_database()

    def get_connection(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_file)
        conn.row_factory = sqlite3.Row
        conn.execute("PRAGMA foreign_keys = ON")
        return conn

    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        if not os.path.exists(self.db_file):
            print("üóÉÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            conn = self.get_connection()
            try:
                # –ü—Ä–æ—Å—Ç–∞—è –∏ –Ω–∞–¥–µ–∂–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
                self._create_tables(conn)
                self._insert_default_data(conn)
                print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ë–î: {e}")
            finally:
                conn.close()
        else:
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    def _create_tables(self, conn):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        cursor = conn.cursor()

        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        cursor.execute('''
            CREATE TABLE IF NOT EXISTS words (
                word_id INTEGER PRIMARY KEY AUTOINCREMENT,
                english_word TEXT UNIQUE NOT NULL,
                russian_translation TEXT NOT NULL,
                added_by INTEGER DEFAULT NULL
            )
        ''')

        cursor.execute('''
            CREATE TABLE IF NOT EXISTS user_words (
                user_id INTEGER,
                word_id INTEGER,
                PRIMARY KEY (user_id, word_id),
                FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
                FOREIGN KEY (word_id) REFERENCES words(word_id) ON DELETE CASCADE
            )
        ''')

        conn.commit()
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")

    def _insert_default_data(self, conn):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É"""
        cursor = conn.cursor()

        default_words = [
            ('red', '–∫—Ä–∞—Å–Ω—ã–π'), ('blue', '—Å–∏–Ω–∏–π'), ('green', '–∑–µ–ª–µ–Ω—ã–π'),
            ('I', '—è'), ('you', '—Ç—ã'), ('he', '–æ–Ω'), ('she', '–æ–Ω–∞'), ('it', '–æ–Ω–æ'),
            ('cat', '–∫–æ—Ç'), ('dog', '—Å–æ–±–∞–∫–∞'), ('house', '–¥–æ–º'), ('book', '–∫–Ω–∏–≥–∞'),
            ('water', '–≤–æ–¥–∞'), ('food', '–µ–¥–∞'), ('friend', '–¥—Ä—É–≥'),
            ('hello', '–ø—Ä–∏–≤–µ—Ç'), ('goodbye', '–ø–æ–∫–∞'), ('thank you', '—Å–ø–∞—Å–∏–±–æ'),
            ('yes', '–¥–∞'), ('no', '–Ω–µ—Ç'), ('man', '–º—É–∂—á–∏–Ω–∞'), ('woman', '–∂–µ–Ω—â–∏–Ω–∞')
        ]

        for en_word, ru_word in default_words:
            cursor.execute(
                "INSERT OR IGNORE INTO words (english_word, russian_translation) VALUES (?, ?)",
                (en_word, ru_word)
            )

        conn.commit()
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(default_words)} –±–∞–∑–æ–≤—ã—Ö —Å–ª–æ–≤")

    def register_user(self, user_id, username, first_name):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        conn = self.get_connection()
        try:
            cursor = conn.cursor()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            cursor.execute("SELECT 1 FROM users WHERE user_id = ?", (user_id,))
            user_exists = cursor.fetchone() is not None

            if not user_exists:
                cursor.execute(
                    "INSERT INTO users (user_id, username, first_name) VALUES (?, ?, ?)",
                    (user_id, username, first_name)
                )

                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Å–µ –±–∞–∑–æ–≤—ã–µ —Å–ª–æ–≤–∞
                cursor.execute('''
                    INSERT OR IGNORE INTO user_words (user_id, word_id)
                    SELECT ?, word_id FROM words WHERE added_by IS NULL
                ''', (user_id,))

                conn.commit()
                print(f"‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                return True
            else:
                print(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
        finally:
            conn.close()

    def get_user_words(self, user_id):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ (id, en, ru) –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        conn = self.get_connection()
        words = []
        try:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT w.word_id, w.english_word, w.russian_translation
                FROM words w
                INNER JOIN user_words uw ON w.word_id = uw.word_id
                WHERE uw.user_id = ?
                ORDER BY w.english_word
            ''', (user_id,))

            words = [(row[0], row[1], row[2]) for row in cursor.fetchall()]
            print(f"üìñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç {len(words)} —Å–ª–æ–≤")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        finally:
            conn.close()
        return words

    def add_word_to_db(self, user_id, english_word, russian_translation):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –≤ –ë–î –∏ —Å–≤—è–∑—ã–≤–∞–µ—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
        conn = self.get_connection()
        try:
            cursor = conn.cursor()

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ
            cursor.execute(
                "INSERT OR IGNORE INTO words (english_word, russian_translation, added_by) VALUES (?, ?, ?)",
                (english_word, russian_translation, user_id)
            )

            # –ü–æ–ª—É—á–∞–µ–º ID —Å–ª–æ–≤–∞
            cursor.execute("SELECT word_id FROM words WHERE english_word = ?", (english_word,))
            result = cursor.fetchone()

            if result:
                word_id = result[0]
                # –°–≤—è–∑—ã–≤–∞–µ–º —Å–ª–æ–≤–æ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                cursor.execute(
                    "INSERT OR IGNORE INTO user_words (user_id, word_id) VALUES (?, ?)",
                    (user_id, word_id)
                )
                conn.commit()
                print(f"‚úÖ –°–ª–æ–≤–æ '{english_word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return True
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ '{english_word}'")
                return False

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {e}")
            return False
        finally:
            conn.close()

    def delete_word_from_user(self, user_id, word_id):
        """–£–¥–∞–ª—è–µ—Ç —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-—Å–ª–æ–≤–æ."""
        conn = self.get_connection()
        try:
            cursor = conn.cursor()

            cursor.execute("SELECT added_by FROM words WHERE word_id = ?", (word_id,))
            result = cursor.fetchone()
            added_by = result[0] if result else None

            cursor.execute(
                "DELETE FROM user_words WHERE user_id = ? AND word_id = ?",
                (user_id, word_id)
            )

            if added_by == user_id:
                cursor.execute("DELETE FROM words WHERE word_id = ?", (word_id,))

            conn.commit()
            print(f"‚úÖ –°–ª–æ–≤–æ {word_id} —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {e}")
            return False
        finally:
            conn.close()

    def get_word_count(self, user_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        conn = self.get_connection()
        try:
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM user_words WHERE user_id = ?", (user_id,))
            result = cursor.fetchone()
            count = result[0] if result else 0
            print(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç {count} —Å–ª–æ–≤")
            return count
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤: {e}")
            return 0
        finally:
            conn.close()


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db_instance = SQLiteDatabase()


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def register_user(user_id, username, first_name):
    return db_instance.register_user(user_id, username, first_name)


def get_user_words(user_id):
    return db_instance.get_user_words(user_id)


def add_word_to_db(user_id, english_word, russian_translation):
    return db_instance.add_word_to_db(user_id, english_word, russian_translation)


def delete_word_from_user(user_id, word_id):
    return db_instance.delete_word_from_user(user_id, word_id)


def get_word_count(user_id):
    return db_instance.get_word_count(user_id)