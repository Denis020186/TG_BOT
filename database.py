import psycopg2
import psycopg2.extras
import sys
import os

from config import DATABASE_URL

class PostgreSQLDatabase:
    @classmethod
    def get_connection(cls):
        """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = psycopg2.connect(DATABASE_URL)
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            conn.set_client_encoding('UTF8')
            return conn
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise

    @classmethod
    def execute_sql_file(cls, filename):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç SQL —Ñ–∞–π–ª –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = cls.get_connection()
        try:
            cursor = conn.cursor()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(filename):
                print(f"‚ùå –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False

            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
            encodings = ['utf-8', 'utf-8-sig', 'cp1251', 'latin1']

            for encoding in encodings:
                try:
                    with open(filename, 'r', encoding=encoding) as file:
                        sql_script = file.read()

                    # –í—ã–ø–æ–ª–Ω—è–µ–º SQL —Å–∫—Ä–∏–ø—Ç
                    cursor.execute(sql_script)
                    conn.commit()
                    print(f"‚úÖ SQL —Ñ–∞–π–ª {filename} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ (–∫–æ–¥–∏—Ä–æ–≤–∫–∞: {encoding})")
                    return True

                except UnicodeDecodeError:
                    continue
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SQL —Ñ–∞–π–ª–∞ {filename} —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π {encoding}: {e}")
                    conn.rollback()
                    continue

            # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª {filename} –Ω–∏ –≤ –æ–¥–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–µ")
            return False

        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ SQL —Ñ–∞–π–ª–∞ {filename}: {e}")
            conn.rollback()
            return False
        finally:
            conn.close()

    @classmethod
    def check_and_init_database(cls):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

        conn = cls.get_connection()
        try:
            cursor = conn.cursor()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
            cursor.execute("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_name = 'users'
                )
            """)
            tables_exist = cursor.fetchone()[0]

            if not tables_exist:
                print("üîÑ –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
                # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
                if cls.execute_sql_file('create_tables.sql'):
                    # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    cls.execute_sql_file('initial_data.sql')
                print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            else:
                print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
        finally:
            conn.close()

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    @classmethod
    def register_user(cls, user_id, username, first_name):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        conn = cls.get_connection()
        try:
            cursor = conn.cursor()

            cursor.execute(
                "INSERT INTO users (user_id, username, first_name) VALUES (%s, %s, %s) ON CONFLICT (user_id) DO UPDATE SET username = EXCLUDED.username, first_name = EXCLUDED.first_name",
                (user_id, username, first_name)
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Å–µ –±–∞–∑–æ–≤—ã–µ —Å–ª–æ–≤–∞
            cursor.execute('''
                INSERT INTO user_words (user_id, word_id)
                SELECT %s, word_id FROM words WHERE added_by IS NULL
                ON CONFLICT (user_id, word_id) DO NOTHING
            ''', (user_id,))

            conn.commit()
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            conn.rollback()
            return False
        finally:
            conn.close()

    @classmethod
    def get_random_word_and_options(cls, user_id):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –∏ 3 —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –ë–î."""
        conn = cls.get_connection()
        try:
            cursor = conn.cursor()

            # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute('''
                SELECT w.word_id, w.english_word, w.russian_translation
                FROM words w
                INNER JOIN user_words uw ON w.word_id = uw.word_id
                WHERE uw.user_id = %s
                ORDER BY RANDOM()
                LIMIT 1
            ''', (user_id,))

            target_word = cursor.fetchone()
            if not target_word:
                return None, [], []

            target_id, en, ru = target_word

            # –ü–æ–ª—É—á–∞–µ–º 3 —Å–ª—É—á–∞–π–Ω—ã—Ö –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞
            cursor.execute('''
                SELECT w.english_word
                FROM words w
                INNER JOIN user_words uw ON w.word_id = uw.word_id
                WHERE uw.user_id = %s AND w.word_id != %s
                ORDER BY RANDOM()
                LIMIT 3
            ''', (user_id, target_id))

            wrong_answers = [row[0] for row in cursor.fetchall()]

            # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
            options = [en] + wrong_answers

            # –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫–∏
            while len(options) < 4:
                options.append(f"word_{len(options)}")

            # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
            import random
            random.shuffle(options)

            return (ru, options, en)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–ª–æ–≤–∞: {e}")
            return None, [], []
        finally:
            conn.close()

    @classmethod
    def get_user_words(cls, user_id):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        conn = cls.get_connection()
        words = []
        try:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT w.word_id, w.english_word, w.russian_translation
                FROM words w
                INNER JOIN user_words uw ON w.word_id = uw.word_id
                WHERE uw.user_id = %s
                ORDER BY w.english_word
            ''', (user_id,))

            words = [(row[0], row[1], row[2]) for row in cursor.fetchall()]
            return words

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return []
        finally:
            conn.close()

    @classmethod
    def add_word_to_db(cls, user_id, english_word, russian_translation):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –≤ –ë–î –∏ —Å–≤—è–∑—ã–≤–∞–µ—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
        conn = cls.get_connection()
        try:
            cursor = conn.cursor()

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ
            cursor.execute(
                "INSERT INTO words (english_word, russian_translation, added_by) VALUES (%s, %s, %s) ON CONFLICT (english_word) DO NOTHING RETURNING word_id",
                (english_word, russian_translation, user_id)
            )

            result = cursor.fetchone()
            if result:
                word_id = result[0]
                # –°–≤—è–∑—ã–≤–∞–µ–º —Å–ª–æ–≤–æ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                cursor.execute(
                    "INSERT INTO user_words (user_id, word_id) VALUES (%s, %s) ON CONFLICT (user_id, word_id) DO NOTHING",
                    (user_id, word_id)
                )
            else:
                # –ï—Å–ª–∏ —Å–ª–æ–≤–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ ID
                cursor.execute("SELECT word_id FROM words WHERE english_word = %s", (english_word,))
                result = cursor.fetchone()
                if result:
                    word_id = result[0]
                    cursor.execute(
                        "INSERT INTO user_words (user_id, word_id) VALUES (%s, %s) ON CONFLICT (user_id, word_id) DO NOTHING",
                        (user_id, word_id)
                    )

            conn.commit()
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {e}")
            conn.rollback()
            return False
        finally:
            conn.close()

    @classmethod
    def delete_word_from_user(cls, user_id, word_id):
        """–£–¥–∞–ª—è–µ—Ç —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-—Å–ª–æ–≤–æ."""
        conn = cls.get_connection()
        try:
            cursor = conn.cursor()

            cursor.execute("SELECT added_by FROM words WHERE word_id = %s", (word_id,))
            result = cursor.fetchone()
            added_by = result[0] if result else None

            cursor.execute("DELETE FROM user_words WHERE user_id = %s AND word_id = %s", (user_id, word_id))

            if added_by == user_id:
                cursor.execute("DELETE FROM words WHERE word_id = %s", (word_id,))

            conn.commit()
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {e}")
            conn.rollback()
            return False
        finally:
            conn.close()

    @classmethod
    def get_word_count(cls, user_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        conn = cls.get_connection()
        try:
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM user_words WHERE user_id = %s", (user_id,))
            result = cursor.fetchone()
            return result[0] if result else 0
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤: {e}")
            return 0
        finally:
            conn.close()

    @classmethod
    def set_user_state(cls, user_id, state_data):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î."""
        conn = cls.get_connection()
        try:
            cursor = conn.cursor()
            import json
            state_json = json.dumps(state_data)
            cursor.execute(
                "UPDATE users SET user_state = %s WHERE user_id = %s",
                (state_json, user_id)
            )
            conn.commit()
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            conn.rollback()
            return False
        finally:
            conn.close()

    @classmethod
    def get_user_state(cls, user_id):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î."""
        conn = cls.get_connection()
        try:
            cursor = conn.cursor()
            cursor.execute("SELECT user_state FROM users WHERE user_id = %s", (user_id,))
            result = cursor.fetchone()
            if result and result[0]:
                import json
                return json.loads(result[0])
            return {}
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            return {}
        finally:
            conn.close()

    @classmethod
    def clear_user_state(cls, user_id):
        """–û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î."""
        conn = cls.get_connection()
        try:
            cursor = conn.cursor()
            cursor.execute(
                "UPDATE users SET user_state = '{}' WHERE user_id = %s",
                (user_id,)
            )
            conn.commit()
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            conn.rollback()
            return False
        finally:
            conn.close()